// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable enable

namespace database.CompiledModels
{
    internal partial class IngredientEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Ingredient",
                typeof(Ingredient),
                baseEntityType);

            var ingredientId = runtimeEntityType.AddProperty(
                "IngredientId",
                typeof(int),
                propertyInfo: typeof(Ingredient).GetProperty("IngredientId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Ingredient).GetField("<IngredientId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);

            var bakedRecipeId = runtimeEntityType.AddProperty(
                "BakedRecipeId",
                typeof(int?),
                nullable: true);

            var substanceName = runtimeEntityType.AddProperty(
                "SubstanceName",
                typeof(string),
                propertyInfo: typeof(Ingredient).GetProperty("SubstanceName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Ingredient).GetField("<SubstanceName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var key = runtimeEntityType.AddKey(
                new[] { ingredientId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { bakedRecipeId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("BakedRecipeId")! },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("BakedRecipeId")! })!,
                principalEntityType);

            var ingredients = principalEntityType.AddNavigation("Ingredients",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Ingredient>),
                propertyInfo: typeof(BakedRecipe).GetProperty("Ingredients", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BakedRecipe).GetField("<Ingredients>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Ingredient");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
